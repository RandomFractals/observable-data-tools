{
    "id": "cf0741022725717f",
    "slug": "questdb",
    "trashed": false,
    "description": "",
    "likes": 0,
    "publish_level": "public",
    "forks": 0,
    "fork_of": null,
    "update_time": "2022-07-28T12:38:28.200Z",
    "publish_time": "2022-07-15T12:35:07.892Z",
    "publish_version": 290,
    "latest_version": 290,
    "thumbnail": "045d57e03d9f221066c08640ee65c887cbcccac4431d319740e74adeb9c9e4f6",
    "default_thumbnail": "045d57e03d9f221066c08640ee65c887cbcccac4431d319740e74adeb9c9e4f6",
    "roles": [],
    "sharing": null,
    "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🗺️ & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual",
        "tier": "basic"
    },
    "creator": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map 🗺️ & graph  📈 data 🈸 ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "tier": "basic"
    },
    "authors": [
        {
            "id": "17b72db66175b428",
            "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
            "name": "Taras Novak",
            "login": "randomfractals",
            "bio": "I map 🗺️ & graph  📈 data 🈸 ",
            "home_url": "https://www.linkedin.com/in/tarasnovak",
            "github_login": "RandomFractals",
            "tier": "basic",
            "approved": true,
            "description": ""
        }
    ],
    "collections": [
        {
            "id": "729de16217a66212",
            "type": "public",
            "slug": "tables",
            "title": "Tables",
            "description": "Tabular data tools and diagraming notebooks.",
            "update_time": "2022-08-03T12:29:41.521Z",
            "pinned": false,
            "ordered": false,
            "custom_thumbnail": null,
            "default_thumbnail": "05d4135745e128d1628ad6e5022ad4918935363d56623b1bc583c96cf97766bb",
            "thumbnail": "05d4135745e128d1628ad6e5022ad4918935363d56623b1bc583c96cf97766bb",
            "listing_count": 14,
            "parent_collection_count": 0,
            "owner": {
                "id": "17b72db66175b428",
                "github_login": "RandomFractals",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
                "login": "randomfractals",
                "name": "Taras Novak",
                "bio": "I map 🗺️ & graph  📈 data 🈸 ",
                "home_url": "https://www.linkedin.com/in/tarasnovak",
                "type": "individual",
                "tier": "basic"
            }
        }
    ],
    "files": [],
    "comments": [],
    "commenting_lock": null,
    "suggestion_from": null,
    "suggestions_to": [],
    "version": 290,
    "title": "QuestDB",
    "license": "mit",
    "copyright": "Copyright 2022 Random Fractals Inc.",
    "nodes": [
        {
            "id": 0,
            "name": "",
            "value": "# QuestDB\n\n[QuestDB](https://github.com/questdb/questdb) is a high-performance, open-source SQL database for applications in financial services, IoT, machine learning, DevOps and observability. It includes endpoints for PostgreSQL wire protocol, high-throughput schema-agnostic ingestion using InfluxDB Line Protocol, and a REST API for queries, bulk imports, and exports.",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 280,
            "name": null,
            "value": "toc()",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 283,
            "name": "",
            "value": "## QuestDB Client",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 17,
            "name": "",
            "value": "We'll use [QuestDB](https://observablehq.com/@observablehq/questdb?collection=@observablehq/database-clients) Observable [DatabaseClient](https://observablehq.com/@observablehq/database-client-specification) implementation to connect to the [QuestDB demo](https://demo.questdb.io/) database instance and run [QuestDB SQL](https://questdb.io/docs/concept/sql-execution-order) queries:",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 11,
            "name": null,
            "value": "db = new QuestDatabaseClient(\"https://demo.questdb.io\")",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 60,
            "name": "",
            "value": "## Database Tables\n\nQuestDB [`SHOW`](https://questdb.io/docs/reference/sql/show) SQL lists database tables and columns:",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 13,
            "name": "",
            "value": "SHOW TABLES",
            "pinned": true,
            "mode": "sql",
            "data": {
                "ui": {
                    "showCharts": true
                },
                "source": {
                    "name": "db",
                    "type": "cell",
                    "dialect": "sql"
                }
            },
            "outputs": []
        },
        {
            "id": 36,
            "name": null,
            "value": "tables = db.sql(['SHOW TABLES;'])",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 32,
            "name": "",
            "value": "## Table Columns\n\n*Select table:*",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 30,
            "name": null,
            "value": "viewof table = Inputs.select(tables.map(table => table.table)\r\n  // filter out system tables\r\n  .filter(tableName => !tableName.startsWith('sys'))\r\n  .sort().reverse(), \r\n  {\r\n    label: md`## Table`\r\n  })",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 53,
            "name": null,
            "value": "Inputs.table(tableColumns)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 64,
            "name": null,
            "value": "tableColumns = db.sql([`SHOW COLUMNS FROM ${table};`])",
            "pinned": true,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 69,
            "name": "",
            "value": "## Table Summary\n\nTable summary of the max last ${rowLimit} rows from the `${table}` table using [Summary Table](https://observablehq.com/@observablehq/summary-table) Observable cell:",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 152,
            "name": null,
            "value": "viewof rowLimit = Inputs.select([1000, 10000, 50000], {label: 'Row Limit:'})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 90,
            "name": null,
            "value": "viewof tableSummary = SummaryTable(data, {label: table})",
            "pinned": true,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 98,
            "name": "",
            "value": "## Table Data\n\n**${table}**",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 103,
            "name": null,
            "value": "viewof searchResults = Inputs.search(data)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 105,
            "name": null,
            "value": "Inputs.table(searchResults)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 85,
            "name": null,
            "value": "data = db.sql([`SELECT * FROM ${table} LIMIT -${rowLimit}`])",
            "pinned": true,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 114,
            "name": "",
            "value": "## Data Wrangler\n\nQuery and transform QuestDB `${table}` data with [Arquero](https://uwdata.github.io/arquero/) in Observable [Data Wrangler](https://observablehq.com/@observablehq/data-wrangler) cell with auto-generated JS data transformations code:",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 131,
            "name": null,
            "value": "viewof queryEditor = Wrangler(data)",
            "pinned": true,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 159,
            "name": "",
            "value": "## Table Data SQL\n\nQuery QuestDB tables with Observable [SQL cell](https://observablehq.com/@observablehq/sql-cell):",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 162,
            "name": "",
            "value": "SELECT * FROM weather LIMIT -1000",
            "pinned": true,
            "mode": "sql",
            "data": {
                "ui": {
                    "showCharts": true
                },
                "source": {
                    "name": "db",
                    "type": "cell",
                    "dialect": "sql"
                }
            },
            "outputs": []
        },
        {
            "id": 268,
            "name": "",
            "value": "**tip:** use [QuestDB SQL](https://questdb.io/docs/concept/sql-execution-order/) docs and tables diagram below to draft your SQL cell queries.",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 178,
            "name": "",
            "value": "## Tables Diagram\n\n[Graphviz](https://graphviz.org) tables diagram with table column names and column data types:\n\n**tip**: click on the `tablesDiagram` cell vertical ... menu below to download it in SVG or PNG format.",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 191,
            "name": null,
            "value": "tablesDiagram = diagram(db)",
            "pinned": true,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 243,
            "name": "",
            "value": "### [Mermaid ER Diagram](https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram)\n\nTODO: get all the tables to show in this mermaid diagram as in the dot diagram above.",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 247,
            "name": null,
            "value": "mermaidTablesDiagram = mermaidDiagram(db)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 257,
            "name": null,
            "value": "html`\r\n${DOM.download(await rasterize(mermaidTablesDiagram), `questdb-tables-diagram.png`, \"Save as PNG\")}\r\n${DOM.download(await serialize(mermaidTablesDiagram), `questdb-tables-diagram.svg`, \"Save as SVG\")}\r\n`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 240,
            "name": null,
            "value": "async function mermaidDiagram(db) {\r\n  // get database tables and colulmns\r\n  const tables = await describe(db);\r\n  const tableColumns = await Promise.all(tables.map(table => db.sql([`SHOW COLUMNS FROM ${table};`])));\r\n\r\n  // create table nodes mermaid diagram string\r\n  const tableNodes = tables.map((table, index) =>\r\n    `${table} {\r\n      ${tableColumns[index].map((column) => \r\n        `${column.column} ${column.type.replace('(', '-').replace(')', '')}`).join('\\n')}\r\n    }`).join('\\n');\r\n\r\n  return mermaid`erDiagram\r\n    ${tableNodes}\r\n  `;  \r\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 189,
            "name": null,
            "value": "async function diagram(db) {\r\n  // get database tables and colulmns\r\n  const tables = await describe(db);\r\n  const tableColumns = await Promise.all(tables.map(table => db.sql([`SHOW COLUMNS FROM ${table};`])));\r\n\r\n  // create table nodes dot diagram string with html table labels\r\n  const tableNodes = tables.map((table, index) =>\r\n    `\"${table}\" [shape=none, label=<\r\n    <table bgcolor=\"#cccccc\" border=\"0\" cellborder=\"0\" cellspacing=\"1\" cellpadding=\"3\">\r\n      <tr>\r\n        <td colspan=\"2\" bgcolor=\"skyblue\">\r\n          <b>${table}</b>\r\n        </td>\r\n      </tr>${tableColumns[index].map((column) => `\r\n      <tr>\r\n        <td port=\"${column.column}\" align=\"left\" bgcolor=\"white\">${column.column}</td>\r\n        <td align=\"left\" bgcolor=\"white\">${column.type}</td>\r\n      </tr>`).join('')}}\r\n    </table>\r\n    >]`).join('\\n');\r\n\r\n  return neato`digraph Tables {\r\n    node [fontsize=12]\r\n    rankdir = LR;\r\n    ${tableNodes}\r\n  }`;\r\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 233,
            "name": null,
            "value": "async function describe(db) {\r\n  // get database table names\r\n  return (await db.sql(['SHOW TABLES;'])).map(table => table.table) // table name\r\n    .filter(tableName => !tableName.startsWith('sys')); // skip system tables\r\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 5,
            "name": "",
            "value": "## Appendix",
            "pinned": false,
            "mode": "md",
            "data": null,
            "outputs": []
        },
        {
            "id": 272,
            "name": null,
            "value": "import {toc} from '@nebrius/indented-toc'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 7,
            "name": null,
            "value": "import {QuestDatabaseClient} from '@observablehq/questdb'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 71,
            "name": null,
            "value": "import {SummaryTable} from '@observablehq/summary-table'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 116,
            "name": null,
            "value": "import { aq, op } from '@uwdata/arquero'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 121,
            "name": null,
            "value": " import {Wrangler, op} from '@observablehq/data-wrangler'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 250,
            "name": null,
            "value": "import {rasterize, serialize} from '@mbostock/saving-svg'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        },
        {
            "id": 180,
            "name": null,
            "value": "import {neato} from '@gordonsmith/graphviz'",
            "pinned": false,
            "mode": "js",
            "data": null,
            "outputs": []
        }
    ],
    "resolutions": [
        {
            "type": "notebook",
            "specifier": "@observablehq/questdb",
            "value": "e29ad98f8fe44888@161"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/summary-table",
            "value": "253d3c1b5eb8410c@1935"
        },
        {
            "type": "notebook",
            "specifier": "@mkfreeman/plot-tooltip",
            "value": "67d1b2c32f1883c4@659"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/plot-cheatsheets-marks",
            "value": "d2dffac0e42406e8@3045"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/cheatsheet-utilities",
            "value": "794aa914fd015c9e@3360"
        },
        {
            "type": "notebook",
            "specifier": "@nebrius/indented-toc",
            "value": "9bed702f80a3797e@402"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/plot-exploration-penguins",
            "value": "32eeadb67cb4cbcb@1472"
        },
        {
            "type": "notebook",
            "specifier": "@mbostock/pbcopy",
            "value": "ab3e70b29c480e6d@83"
        },
        {
            "type": "notebook",
            "specifier": "@zanarmstrong/highlight-color-w-dropdown",
            "value": "8d6618bb2d7befdd@199"
        },
        {
            "type": "notebook",
            "specifier": "@jashkenas/inputs",
            "value": "e93997d5089d7165@2303"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/plot-stack",
            "value": "33bc32700f22adb1@885"
        },
        {
            "type": "notebook",
            "specifier": "@john-guerra/file-input-with-default-value",
            "value": "1371b3b2446a73b4@307"
        },
        {
            "type": "notebook",
            "specifier": "@uwdata/arquero",
            "value": "79750b3b8e929d9d@226"
        },
        {
            "type": "notebook",
            "specifier": "@observablehq/data-wrangler",
            "value": "6dcf44d762a0599e@4320"
        },
        {
            "type": "notebook",
            "specifier": "@mbostock/copier",
            "value": "ab3e70b29c480e6d@83"
        },
        {
            "type": "notebook",
            "specifier": "@mbostock/saving-svg",
            "value": "576f8943dbfbd395@114"
        },
        {
            "type": "notebook",
            "specifier": "@d3/contours",
            "value": "9d7cc1d26bcca7c7@267"
        },
        {
            "type": "notebook",
            "specifier": "@d3/color-legend",
            "value": "a33468b95d0b15b0@808"
        }
    ]
}