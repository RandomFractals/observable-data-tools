{
    "id": "5ce07683f51a862f",
    "slug": "tabular-data-viewer",
    "trashed": false,
    "description": "",
    "likes": 8,
    "publish_level": "public",
    "forks": 0,
    "fork_of": {
        "id": "d5a4b7a41937a0af",
        "slug": "data-table-viewer",
        "title": "Data Table Viewer",
        "owner": {
            "id": "17b72db66175b428",
            "github_login": "RandomFractals",
            "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
            "login": "randomfractals",
            "name": "Taras Novak",
            "bio": "I map üó∫Ô∏è & graph  üìà data üà∏ ",
            "home_url": "https://www.linkedin.com/in/tarasnovak",
            "type": "individual",
            "tier": "basic"
        },
        "version": 120
    },
    "update_time": "2022-08-16T17:57:36.822Z",
    "publish_time": "2021-12-19T13:11:25.259Z",
    "publish_version": 321,
    "latest_version": 321,
    "thumbnail": "5b79ba30ff3fb753beca029345ed608893356371519dbdfdb8a64e8911cc6899",
    "default_thumbnail": "5b79ba30ff3fb753beca029345ed608893356371519dbdfdb8a64e8911cc6899",
    "roles": [],
    "sharing": null,
    "owner": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map üó∫Ô∏è & graph  üìà data üà∏ ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "type": "individual",
        "tier": "basic"
    },
    "creator": {
        "id": "17b72db66175b428",
        "github_login": "RandomFractals",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
        "login": "randomfractals",
        "name": "Taras Novak",
        "bio": "I map üó∫Ô∏è & graph  üìà data üà∏ ",
        "home_url": "https://www.linkedin.com/in/tarasnovak",
        "tier": "basic"
    },
    "authors": [
        {
            "id": "17b72db66175b428",
            "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
            "name": "Taras Novak",
            "login": "randomfractals",
            "bio": "I map üó∫Ô∏è & graph  üìà data üà∏ ",
            "home_url": "https://www.linkedin.com/in/tarasnovak",
            "github_login": "RandomFractals",
            "tier": "basic",
            "approved": true,
            "description": ""
        }
    ],
    "collections": [
        {
            "id": "729de16217a66212",
            "type": "public",
            "slug": "tables",
            "title": "Tables",
            "description": "Tabular data tools and diagraming notebooks.",
            "update_time": "2022-08-03T12:29:41.521Z",
            "pinned": false,
            "ordered": false,
            "custom_thumbnail": null,
            "default_thumbnail": "05d4135745e128d1628ad6e5022ad4918935363d56623b1bc583c96cf97766bb",
            "thumbnail": "05d4135745e128d1628ad6e5022ad4918935363d56623b1bc583c96cf97766bb",
            "listing_count": 14,
            "parent_collection_count": 0,
            "owner": {
                "id": "17b72db66175b428",
                "github_login": "RandomFractals",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/57d3bf95c5ecfa9ee3b08dec1a71504412704a6788f769860bf9d5191e789336",
                "login": "randomfractals",
                "name": "Taras Novak",
                "bio": "I map üó∫Ô∏è & graph  üìà data üà∏ ",
                "home_url": "https://www.linkedin.com/in/tarasnovak",
                "type": "individual",
                "tier": "basic"
            }
        }
    ],
    "files": [],
    "comments": [],
    "commenting_lock": null,
    "suggestion_from": null,
    "suggestions_to": [],
    "version": 321,
    "title": "Tabular Data Viewer ‰∏≠",
    "license": "mit",
    "copyright": "Copyright 2022 Random Fractals Inc.",
    "nodes": [
        {
            "id": 0,
            "value": "md`# Tabular Data Viewer ‰∏≠\n\nUse this [Tabular Data Viewer ‰∏≠](https://twitter.com/hashtag/TabularDataViewer?src=hashtag_click) notebook üìì to view sample datasets or preview any public\n[Apache Arrow](https://observablehq.com/@randomfractals/apache-arrow), \n**CSV**, [**GeoJSON**](https://www.rfc-editor.org/rfc/rfc7946.html) or **JSON array** data with [Summary Table](https://observablehq.com/@observablehq/summary-table) and [Tabulator](http://tabulator.info/). Just paste your data url to fetch it. \n\nAlso, try our [Data Table](https://github.com/RandomFractals/vscode-data-table/releases) üà∏ notebook üìì cell ‚åó output renderer extension with [VSCode Notebooks](https://marketplace.visualstudio.com/search?target=VSCode&category=Notebooks&sortBy=Installs) üìö.\n`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 19,
            "value": "viewof dataSet = Inputs.select(dataSets, {\n  label: html`<b>dataset</b>`\n})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 22,
            "value": "viewof dataUrl = Inputs.text({\n  label: html`<b>dataUrl</b>`,\n  placeholder: 'type data url and click fetch', \n  value: `${dataUrlParam ? dataUrlParam : 'https://raw.githubusercontent.com/vega/vega-datasets/master/data/' + dataSet}`,\n  submit: 'fetchData'\n})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 24,
            "value": "shareLink = md `*share a link to your [data](https://observablehq.com/@randomfractals/tabular-data-viewer?dataUrl=${dataUrl})*`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 59,
            "value": "viewof dataSummaryView = SummaryTable(data)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 170,
            "value": "## Tabular Data View",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 219,
            "value": "viewof tableOptions = Inputs.form([\n  Inputs.button('Download', {reduce: () => table.download('csv', 'data.csv')}),\n])",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 131,
            "value": "tableContainer = html `<div id=\"table-container\" style=\"height: 600px\">\n</div>`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 146,
            "value": "table = new Tabulator('#table-container', {\n  height: 645,\n  autoColumns: true,\n  columnDefaults: {\n    headerMenu: columnHeaderMenu\n  },\n  clipboard: true, // eanble clipboard copy and paste\n  clipboardPasteAction: 'replace',\n  layout: tableLayout,\n  layoutColumnsOnNewData: true,\n  movableColumns: movableColumns,\n  movableRows: movableRows,\n  selectable: selectableRows,\n  rowContextMenu: rowContextMenu,\n  pagination: pagination,\n  paginationSize: paginationSize,\n  paginationSizeSelector: pageSizes,\n  renderVerticalBuffer: 300, // set virtual DOM buffer to 300px\n  debugInvalidOptions: true, // tabulator warnings\n  debugEventsExternal: ['tableBuilding', 'dataLoaded', 'tableBuilt'], // log specified tabulator events\n \tdata: data,\n  persistenceMode: 'local',\n  persistenceID: dataUrl,\n  persistentLayout: true,\n  persistence: {\n    sort: true,\n    filter: true,\n    group: true,\n    columns: true,\n  }\n});",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 238,
            "value": "### Table UX Tips\n- Hold **CTRL** or **Shift** key when clicking on column headers to **Sort** table data by multiple columns.\n- See [Clipboard](http://tabulator.info/docs/5.0/clipboard) options for the clipboard copy and paste data options.\n- Use row context menu to **Delete** or **Freeze** a row.",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 201,
            "value": "## Table Toggles",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 209,
            "value": "viewof tableLayout = Inputs.select(tableLayouts, {value: 'fitDataStretch', label: 'Table Layout'})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 297,
            "value": "viewof pagination = Inputs.toggle({label: 'Pagination', value: true})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 295,
            "value": "viewof paginationSize = Inputs.select(pageSizes, {value: 100000, label: 'Page Size'})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 226,
            "value": "viewof movableColumns = Inputs.toggle({label: 'Movable Columns', value: true})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 230,
            "value": "viewof movableRows = Inputs.toggle({label: 'Movable Rows', value: true})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 234,
            "value": "viewof selectableRows = Inputs.toggle({label: 'Selectable Rows', value: true})",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 205,
            "value": "// from: http://tabulator.info/docs/5.0/layout\ntableLayouts = [\n  'fitData',\n  'fitDataFill',\n  'fitDataStretch',\n  'fitDataTable',\n  'fitColumns'\n]",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 285,
            "value": "pageSizes = [20, 100, 1000, 10000, 100000, 1000000, 10000000]",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 270,
            "value": "columnHeaderMenu = [\n  {\n    label: 'Hide Column',\n    action: function (e, column) {\n      column.hide();\n    }\n  },\n  {\n    label: \"Freeze Column\",\n    action: function (e, column) {\n      column.updateDefinition({ frozen: true });\n    }\n  },\n  {\n    label: 'Delete Column',\n    action: function (e, column) {\n      column.delete();\n    }\n  }\n];\n",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 259,
            "value": "// row context menu. see: http://tabulator.info/docs/5.0/menu\nrowContextMenu = [\n  {\n    label: \"<i class='fas fa-trash'></i> Delete Row\",\n    action: function(e, row) {row.delete()}\n  },\n  {\n    label: \"Freeze Row\",\n    action: function (e, row) { row.freeze(); }\n  }\n]",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 197,
            "value": "## Data",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 48,
            "value": "data = fetchData(dataUrl)",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 29,
            "value": "dataUrlParam = new URLSearchParams(html`<a href>`.search).get('dataUrl')",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 36,
            "value": "dataSets = [\n  'airports.csv', 'co2-concentration.csv', 'disasters.csv', 'flights-3m.csv', 'flights-airport.csv',\n  'gapminder-health-income.csv', 'github.csv', 'iowa-electricity.csv', 'la-riots.csv', 'lookup_groups.csv',\n  'lookup_people.csv', 'population_engineers_hurricanes.csv', 'seattle-temps.csv', 'seattle-weather.csv',\n  'sf-temps.csv', 'sp500.csv', 'stocks.csv', 'us-employment.csv', 'weather.csv', 'windvectors.csv', 'zipcodes.csv',\n  'barley.json', 'birdstrikes.json', 'budget.json', 'budgets.json', 'burtin.json', 'cars.json', 'climate.json',\n  'countries.json', 'crimea.json', 'driving.json', 'flare-dependencies.json', 'flare.json', \n  'flights-2k.json', 'flights-5k.json', 'flights-10k.json', 'flights-20k.json', \n  'flights-200k.json', 'flights-200k.arrow',\n  'gapminder.json', 'income.json', 'iris.json', 'jobs.json', 'londonCentroids.json',\n  'monarchs.json', 'movies.json', 'normal-2d.json', 'points.json',\n  'udistrict.json', 'unemployment-across-industries.json', 'us-state-capitals.json',\n  'weball26.json', 'wheat.json'\n]",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 41,
            "value": "async function fetchData(dataUrl) {\n  let data = [];\n  if (dataUrl.endsWith('.csv')) {\n    data = await d3.csvParse(await d3.text(dataUrl), d3.autoType);\n  } \n  else if (dataUrl.endsWith('.json') || dataUrl.endsWith('.geojson')) {\n    data = await d3.json(dataUrl);\n    if (data.features) {\n      data = flattenGeoData(data);\n    }\n  }\n  else if (dataUrl.endsWith('.arrow')) {\n    data = loadArrowData(dataUrl);\n  }\n  return data;\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 80,
            "value": "function flattenGeoData(data) {\n  if (data.features) {\n    const features = data.features.map(feature => {\n      let geometry = {};\n      Object.keys(feature?.geometry).forEach(key => {\n        geometry[`geometry.${key}`] = feature.geometry[key];\n      });\n      let properties = {};\n      Object.keys(feature?.properties).forEach(key => {\n        properties[`${key}`] = feature.properties[key];\n      });\n      const {geometry: g, properties: p, ...restOfKeys} = feature;\n      return {...restOfKeys, ...properties, ...geometry};\n    });\n    return features;\n  }\n  return data;\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 43,
            "value": "async function loadArrowData(dataUrl){\n  const response = await fetch(dataUrl);\n  const arrayBuffer = await response.arrayBuffer();\n  const table = arrow.Table.from(new Uint8Array(arrayBuffer));\n  const rows = Array(table.length);\n  const fields = table.schema.fields.map(d => d.name);  \n  for (let i=0, n=rows.length; i<n; ++i) {\n    const proto = {};\n    fields.forEach((fieldName, index) => {\n      const column = table.getColumnAt(index);\n      proto[fieldName] = column.get(i);\n    });\n    rows[i] = proto;\n  }\n  return rows;\n}",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 133,
            "value": "## Table Styles",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 93,
            "value": "tableStyles = html `\n<style>\n/* add space for sort direction symbol */\nthead th span {\n  margin-left: 0 !important;\n  padding-right: 0.4rem;\n}\n\n.tabulator .tabulator-tableholder{\n  background-color: aliceblue;\n}\n</style>`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 140,
            "value": "html`<link href='https://unpkg.com/tabulator-tables@5.3.1/dist/css/tabulator.min.css' rel='stylesheet' />\ntabulator.min.css`",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 7,
            "value": "## Imports",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 54,
            "value": "import {SummaryTable} from \"@observablehq/summary-table\"",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 121,
            "value": "Tabulator = require('https://unpkg.com/tabulator-tables@5.3.1');",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 17,
            "value": "arrow = require('apache-arrow@6.0.1')",
            "pinned": false,
            "mode": "js",
            "data": null,
            "name": null
        }
    ],
    "resolutions": []
}